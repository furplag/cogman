#!/bin/bash
set -ue -o pipefail
export LC_ALL=C

###
# el8.startup.sh
# https://github.com/furplag/cogman
# Copyright 2019+ furplag
# Licensed under MIT (https://github.com/furplag/cogman/blob/main/LICENSE)
#
# scripts on startup, shutdown and initial settings to virtual machines,
# maybe useful for poor man like me, but currently just only for me own .
#
# Overview
# 1.  Server initial setting (do only first time) .
#   1.  makes some optimizations for the VM to stands a web server .
#     - i18N (Locale / Language) setting .
#     - l10N (Timezone) setting .
#     - unforcing SELinux .
#   2.  change SSH port number for protect under crack .
#     - Firewall setting (firewalld) .
#     - SSH port number setting (sshd) .
#
#       | setting | change to |
#       |----|----|
#       | Port | the port number you  decide to change . |
#       | PermitRootLogin | without-password |
#       | PubkeyAuthentication | yes |
#       | PasswordAuthentication | no |
#       | PermitEmptyPasswords | no |
#       | ChallengeResponseAuthentication | no |
#       | GSSAPIAuthentication | no |
#
#       - only use Public Key Authentication .
#       - enable to login as Root directly .
#     - generate SSH key pair .
#   3.  and never repeated .
# 2.  Server startup notification .
#     you can receive notification of server startup using IFTTT webhook API .
#     1. Create IFTTT like that as below .
#     > IF This: webhook named as "startup" event fired .
#     > Then That: send a email message from "Webhooks via IFTTT" to you .
#     >>  Note: you should create endpoints of "send email" per events you need to receive notification .
#     >>  See also IFTTT webhook documentation, for more information .

# variable
if ! declare -p repo_url >/dev/null 2>&1; then declare -r repo_url='https://raw.githubusercontent.com/furplag/cogman/main'; fi
if ! declare -p we_have_done >/dev/null 2>&1; then declare -r we_have_done='/etc/profile.d/cogman.initialized.sh'; fi
if ! declare -p init_configs >/dev/null 2>&1; then declare -r init_configs='locale selinux slackbot ssh sshkey timezone'; fi
if ! declare -p indent >/dev/null 2>&1; then declare indent='\xF0\x9F\x91\xBB'; fi

# vars of server initialization
if ! declare -p platform >/dev/null 2>&1; then declare -r locale_lang=; fi
if ! declare -p platform >/dev/null 2>&1; then declare -r timezone=; fi
if ! declare -p platform >/dev/null 2>&1; then declare -r ssh_port_number=; fi
if ! declare -p platform >/dev/null 2>&1; then declare -r ssh_key_passphrase=; fi
if ! declare -p platform >/dev/null 2>&1; then declare -r ssh_keygen_options='-t ed25519'; fi

# vars of server status notification
if ! declare -p ifttt_api_key >/dev/null 2>&1; then declare -r ifttt_api_key=; fi

if ! declare -p platform >/dev/null 2>&1; then declare -r platform='Unknown'; fi
if ! declare -p project >/dev/null 2>&1; then declare -r project='Unknown'; fi
if ! declare -p instance >/dev/null 2>&1; then declare -r instance="$(hostname)"; fi

# vars of server status notification using Slack and HUBOT
if ! declare -p slackbot_user >/dev/null 2>&1; then declare -r slackbot_user='shockwave'; fi
if ! declare -p slackbot_group >/dev/null 2>&1; then declare -r slackbot_group='decepticons'; fi
if ! declare -p slackbot_uid >/dev/null 2>&1; then declare -ir slackbot_uid=1101; fi
if ! declare -p slackbot_gid >/dev/null 2>&1; then declare -ir slackbot_gid=1111; fi
if ! declare -p slackbot_hubot_token >/dev/null 2>&1; then declare -r slackbot_hubot_token=${HUBOT_SLACK_TOKEN:-}; fi
if ! declare -p slackbot_hubot_domain >/dev/null 2>&1; then declare -r slackbot_hubot_domain='example.com'; fi
if ! declare -p slackbot_hubot_dir >/dev/null 2>&1; then declare -r slackbot_hubot_dir="/home/${slackbot_user}/hubot-${slackbot_user}"; fi
if ! declare -p slackbot_hubot_name >/dev/null 2>&1; then declare -r slackbot_hubot_name="slackbot-${slackbot_user}"; fi
if ! declare -p slackbot_hubot_desc >/dev/null 2>&1; then declare -r slackbot_hubot_desc='server status notifierer generated by Cogman .'; fi
if ! declare -p slackbot_hubot_owner >/dev/null 2>&1; then declare -r slackbot_hubot_owner="${slackbot_user} ${slackbot_user}.${instance,,}.${project,,}.${platform,,}@${slackbot_hubot_domain}"; fi

# load ./misc.sh .
source <(curl "${repo_url}/configuration/misc.sh" -fLs);

# Server initial setting (do only first time) .
if ! did_we_have_done; then source <(curl "${repo_url}/el8.initialize.sh" -fLsS); fi

# Server startup notification .
if [[ -z ${ifttt_api_key} ]]; then echo -e "${indent}\xF0\x9F\x8D\xA3  : ${platform}:${project}:${instance} start ."
elif ! bash -c "curl ${repo_url}/notification/ifttt.webhook.sh -LfsS | bash -s \"${ifttt_api_key}\" \"ping\" \"started\" \"${platform}/${project}\" \"${instance}\""; then
  echo -e "${indent}\xF0\x9F\x91\xB9: server startup notification (IFTTT webhook) failed ."; fi

# end .
indent='\xF0\x9F\x91\xBB'
